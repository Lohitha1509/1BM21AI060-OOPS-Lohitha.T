# -*- coding: utf-8 -*-
"""class number(27-11-23).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vHl_QcIjQ8Lge0DcEuTcB_9nqrwJybz7
"""

#Create class number with only one variable as double primitive type.to include the following ,methods
#(include respective constructors) isZero(), isPositive(), isNegative(),isOdd(), isEven(),isPrime(), isArmstrong()
#the above methods return boolean primitive type , getFactorial(), getSqrt(),getSqr(), sumDigits(), getReverse
#the above methods return double primitive type.write the driver class for main method which invokes each method using object

import math

class Number:
    def __init__(self, value):
        self.value = value

    def isZero(self):
        return self.value == 0

    def isPositive(self):
        return self.value > 0

    def isNegative(self):
        return self.value < 0

    def isOdd(self):
        return self.value % 2 != 0

    def isEven(self):
        return self.value % 2 == 0

    def isPrime(self):
        if self.value < 2:
            return False
        for i in range(2, int(math.sqrt(self.value)) + 1):
            if self.value % i == 0:
                return False
        return True

    def isArmstrong(self):
        order = len(str(self.value))
        temp = self.value
        sum = 0
        while temp != 0:
            digit = temp % 10
            sum += digit ** order
            temp //= 10
        return sum == self.value

    def getFactorial(self):
        if self.value < 0:
            raise ValueError("Factorial is not defined for negative numbers.")
        if self.value == 0 or self.value == 1:
            return 1
        result = 1
        for i in range(2, int(self.value) + 1):
            result *= i
        return result

    def getSqrt(self):
        if self.value < 0:
            raise ValueError("Square root is not defined for negative numbers.")
        return math.sqrt(self.value)

    def getSqr(self):
        return self.value ** 2

    def sumDigits(self):
        temp = abs(self.value)
        _sum = 0
        while temp != 0:
            _sum += temp % 10
            temp //= 10
        return _sum

    def getReverse(self):
        temp = abs(self.value)
        reversed_value = 0
        while temp != 0:
            reversed_value = reversed_value * 10 + temp % 10
            temp //= 10
        return reversed_value


if __name__ == "__main__":
    myNumber = Number(25)

    print("Is zero?", myNumber.isZero())
    print("Is positive?", myNumber.isPositive())
    print("Is negative?", myNumber.isNegative())
    print("Is odd?", myNumber.isOdd())
    print("Is even?", myNumber.isEven())
    print("Is prime?", myNumber.isPrime())
    print("Is Armstrong?", myNumber.isArmstrong())

    print("Factorial:", myNumber.getFactorial())
    print("Square root:", myNumber.getSqrt())
    print("Square:", myNumber.getSqr())
    print("Sum of digits:", myNumber.sumDigits())
    print("Reverse:", myNumber.getReverse())